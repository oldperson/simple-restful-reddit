openapi: 3.0.0
info:
  title: Simple RESTful Reddit
  description: |+
    Both guest and authenticated can access or manipulate the resource of Reddit by these RESTful APIs.
    However, some APIs need authentication / authorization, you have to register (POST /users) first,
    then create auth token (POST /authTokens), 
    finally, add "Bearer [your auth token]" to the Authorization header of HTTP request 
    (If you use this page, swagger UI, you can click the Authorize button and enter your auth token).
    The source code is on GitHub [https://github.com/oldperson/simple-restful-reddit/tree/mongodb](https://github.com/oldperson/simple-restful-reddit/tree/mongodb)
  version: 2.0.0
servers:
    - url: 'https://simplerestfulreddit.ddns.net/v2'
    - url: 'http://simplerestfulreddit.ddns.net/v2'
tags:
  - name: users
    description: Resources about users, include register
  - name: posts
    description: Resources about posts
  - name: communities
    description: Resources about communities
  - name: comments
    description: Resources about comments
  - name: authentication/authorization
    description: Resources about authentication and authorization
paths:
  /authTokens:
    post:
      summary: Create a token for authentication and authorization.
      tags:
        - authentication/authorization
      requestBody:
        description: Requires informations for authentication.
        required: true
        content:
          application/json:
            schema:
              required:
                - userName
                - password
              type: object
              properties:
                userName:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/401AuthenticationFailed'
  '/users/{username}':
    get:
      deprecated: true
      tags:
        - users
      security: []
      summary: Returns the user.
      description: Optional extended description in CommonMark or HTML.
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The name of the user to get.
      responses:
        '200':
          description: user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    post:
      summary: Add a new user
      tags:
        - users
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
               - userName
               - password
               - email
              properties:
                userName:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      userId:
                        type: string
                      userName:
                        type: string
                      email:
                        type: string
                  - $ref: '#/components/schemas/timestamp'
        '409':
          $ref: '#/components/responses/409UserNameAlreadyExists'
        '422':
          $ref: '#/components/responses/422ValidationFailed'
  /posts:
    get:
      summary: List posts
      tags:
        - posts
      parameters: 
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: sort
          description: Sort list in descending order of following tactics.
          schema:
            type: string
            enum:
              - best
              - hot
              - top
              - new
              - rising
              - controversial
        - in: query
          name: search
          description: Search for key words.
          schema:
            type: string
        - in: query
          deprecated: true
          name: popular
          description: >-
            If true returns posts for popular, else returns posts user
            subscribed.
          schema:
            type: boolean
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/post'
                    - $ref: '#/components/schemas/timestamp'
        '422':
          $ref: '#/components/responses/422ValidationFailed'                    
  '/posts/{postId}':
    parameters:
      - $ref: '#/components/parameters/postIdParam'
    get:
      summary: Find content of the post
      tags:
        - posts
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/post'
                  - $ref: '#/components/schemas/timestamp'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed'
    patch:
      security: 
        - bearerAuth: []
      summary: Edit content of the post
      tags:
        - posts
      requestBody:
        description: edited content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/post'
                  - $ref: '#/components/schemas/timestamp'
        '401':
          $ref: '#/components/responses/401AuthenticationFailed'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed'
  '/posts/{postId}/comments':
    parameters:
      - $ref: '#/components/parameters/postIdParam'
    get:
      summary: Find comments of the post
      tags:
        - posts
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items: 
                  allOf:
                    - type: object
                      properties:
                        commentId:
                          type: string
                        postId: 
                          type: string
                    - $ref: '#/components/schemas/comment'
                    - $ref: '#/components/schemas/timestamp'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed' 
    post:
      summary: Add new comment for the post
      tags:
        - posts
      security:
        - bearerAuth: []
      requestBody:
        description: comment
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      commentId:
                        type: string
                      postId:
                        type: string
                  - $ref: '#/components/schemas/comment'
                  - $ref: '#/components/schemas/timestamp'
        '401':
          $ref: '#/components/responses/401AuthenticationFailed'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed'
  '/posts/{postId}/votes':
    put:
      summary: Vote the post
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/postIdParam'
      tags:
        - posts
      requestBody:
        description: vote
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vote'
      responses:
        '200':
          description: Created or updated
          content:
            applictation/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      postId:
                        type: string
                      userId:
                        type: string
                      value:
                        type: string
                      voteId:
                        type: string
                  - $ref: '#/components/schemas/timestamp'
                
        '401':
          $ref: '#/components/responses/401AuthenticationFailed'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed'
  /communities:
    post:
      summary: Create a new community
      security: 
        - bearerAuth: []
      tags:
        - communities
      requestBody:
        description: new community
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/community'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      communityId:
                        type: string
                  - $ref: '#/components/schemas/community'
                  - $ref: '#/components/schemas/timestamp'
        '401':
          $ref: '#/components/responses/401AuthenticationFailed'
        '422':
          $ref: '#/components/responses/422ValidationFailed'
  '/comminites/{communityName}':
    get:
      deprecated: true
      summary: Returns a community.
      tags:
        - communities
      parameters:
        - $ref: '#/components/parameters/communityNameParam'
      responses:
        '200':
          description: Community
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      communityId:
                        type: integer
                  - $ref: '#/components/schemas/community'
                  - $ref: '#/components/schemas/timestamp'
  '/communities/{communityName}/posts':
    parameters:
      - $ref: '#/components/parameters/communityNameParam'
    get:
      summary: Find posts of the community
      tags:
        - posts
        - communities
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - in: query
          name: sort
          description: Sort list in descending order of following tactics.
          schema:
            type: string
            enum:
              - best
              - hot
              - top
              - new
              - rising
              - controversial
        - in: query
          name: search
          description: Search for key words.
          schema:
            type: string
        - in: query
          name: popular
          description: >-
            If true returns posts for popular, else returns posts user
            subscribed.
          schema:
            type: boolean
      responses:
        '200':
          description: A list of posts.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/post'
                    - $ref: '#/components/schemas/timestamp'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed'
    post:
      summary: Add a new post in the community
      security:
        - bearerAuth: []
      tags:
        - communities
        - posts
      requestBody:
        description: new post
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                  allOf:
                    - $ref: '#/components/schemas/post'
                    - $ref: '#/components/schemas/timestamp'
        '401':
          $ref: '#/components/responses/401AuthenticationFailed'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed' 
  '/comments/{commentId}/replies':
    parameters:
      - $ref: '#/components/parameters/commentIdParam'
    get:
      summary: Find all replies of the comment
      tags:
        - comments
      responses:
        '200':
          description: A list of replies.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        commentId:
                          type: string
                        parentCommentId:
                          type: string
                    - $ref: '#/components/schemas/comment'
                    - $ref: '#/components/schemas/timestamp'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed'
    post:
      summary: Reply the comment.
      security:
        - bearerAuth: []
      tags:
        - comments
      requestBody:
        description: new reply
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      commentId:
                        type: integer
                      parentCommentId:
                        type: integer
                  - $ref: '#/components/schemas/comment'
                  - $ref: '#/components/schemas/timestamp'
        '401':
          $ref: '#/components/responses/401AuthenticationFailed'
        '404':
          $ref: '#/components/responses/404ResourceNotFound'
        '422':
          $ref: '#/components/responses/422ValidationFailed'                  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    post:
      type: object
      properties:
        postId:
          type: string
        title:
          type: string
        content:
          type: string
        communityName:
          type: string
        communityId:
          type: string
        authorId:
          type: string
        comments:
          type: integer
        votes:
          type: integer
    community:
      type: object
      required:
        - communityName
      properties:
        communityName:
          type: string
    comment:
      type: object
      properties:
        commentId:
          type: string
        authorId:
          type: string
        content:
          type: string
    vote:
      type: object
      required:
        - value
      properties:
        value:
          type: integer
          enum:
            - 1
            - 0
            - -1
    timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  parameters:
    offsetParam:
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam:
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
    communityNameParam:
      name: communityName
      in: path
      schema:
        type: string
      required: true
      description: Name of the community.
    postIdParam:
      name: postId
      in: path
      schema:
        type: string
      required: true
      description: ID of the post.
    commentIdParam:
      name: commentId
      in: path
      required: true
      schema:
       type: string
      description: ID of the comment
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    "409UserNameAlreadyExists":
      description: "Fail to create user, because the user name already exists"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    "422ValidationFailed":
      description: "Validation failed"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    location:
                      type: string
                    param:
                      type: string
                    value:
                      type: string
                    msg:
                     type: string
    "401AuthenticationFailed":
      description: "Authentication Failed"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
        
    "403Unauthorized":
      description: "Authentication failed"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    "404ResourceNotFound":
      description: "The resource is not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string